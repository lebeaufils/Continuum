{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11300\viewh9440\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //README\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
##Prerequisites\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Boost, Eigen, C++11\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
##Compiling\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
To run this project, compile with the makefile using\
$ ./main\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
##Simulations\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Sadly, the code needs to be recompiled every time a parameter/test is changed.\
There are 6 existing tests that can be run by changing the test case in main.C\
Resolution of the domain is determined when constructing the test class\
eg.\
	Test demTests(N) or Test demTests(Nx, Ny),  where N is the number of grid cells\
Then, to run the tests, run the respective test as a function\
eg.\
	Test.test1();\
Finally, to call the solver\
	RigidBodies::rigid_body_solver(Test, CFL, plot_time, dtmax);\
Where Test is the initialised test case and CFL is the Courant number for the fluid solver (typically 0.5).\
plot_time is a double that determines the time interval data will be printed for intermediate states.\
Dtmax represents the maximum time step allowed in the system, for both fluid and particles.\
For the dem models to be stable, this is usually 0.002/0.001.\
\'97\'97\'97\'97\'97\'97\
Settings (domain, parameters, initial conditions, etc) can be configured through                                                                                                                                       \
\pard\pardeftab720\partightenfactor0
\cf0 	#class demTests 	found in eulerTests.h/C\
Either by creating a new test function or modifying pre-existing test cases.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0
\cf0 Currently, only squares and circles can be generated by calling the functions in \
	#class Polygon	found in Variables.h/C\
(A random convex polygon generator can be found in Polygon.create() but is likely to fail - ie.create complex polygons)\
Thus, for all other polygons, a list of vertices must be provided\
Then, to use them in the test functions, first initialise a polygon class\
	Polygon poly;\
Next, run the create_from_file function of polygon\
	poly.create_from_file(domain, \'93filename\'94, centre);\
Where domain is a variable that exists in demTests, filename is the txt file with a list of vertices (vertices must be listed in linking order and centred around the origin), and centre is a Eigen::Vector2d type variable that represents the centre of the polygon.\
If the vertices provided are their exact values and not centred about the origin, \'91centre\'92 can simply be vector2(0, 0).\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
##Plotting the generated data\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Data will be generated into the Data/ folder based on their \'91time steps\'92\
	dataeuler_X.X00000.txt stores the fluid variables where fluid exists\
	datapoints_X.X00000.txt is generally useless and stores the boundary nodes of each particle\
	Particle_X.txt stores force, torque, velocity, angular velocity, and position of each particle X\
To plot the final positions after the simulation has completed,\
	./plotting\
Will plot the final positions and boundary nodes.\
\
For intermediate states,\
	gnuplot plot2d\
Will plot the intermediate files stored in Data (charge the loop to generate different number of files or change the time-step in the title)\
\
Finally,\
	./forceplot\
Will plot the force and velocity of any particle based on the files Particle_X.txt.\
\
\
\
\
\
\
\
\
\
\
\
	\
	\
	\
}